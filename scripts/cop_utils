#!/bin/bash
DATE='date +%Y-%m-%d'
TIME='date +%I:%M:%S%p'

TimeStamp() {
   printf "TIMESTAMP--%s %s\n" $($DATE) $($TIME)
}

CleanUp() {
   local RC=$1
   : ${RC:=0}
   ###############################################################################
   # Summary
   ###############################################################################
   echo "" | tee -a "$RESULTLOG"
   echo "#########################################################################" |tee -a "$RESULTLOG"
   printf "RC: $RC, $TESTCASE " |tee -a "$RESULTLOG"

   if test "$RC" -eq 0; then
      RESULT="PASSED"
   else
      RESULT="FAILED"
   fi

   printf "%s\n" $RESULT
   RUNTIME_S="$((SECONDS-STARTIME))"
   echo "$((RUNTIME_S/60)) minutes, $((RUNTIME_S%60)) seconds runtime"|tee -a "$RESULTLOG"
   printf "$(TimeStamp) $TESTCASE ENDED\n"|tee -a "$RESULTLOG"
   echo "#########################################################################"|tee -a "$RESULTLOG"

   TimeStamp | tee -a $RESULTLOG
   printf "%s test ended.\n" $TESTCASE
}


function ErrorExit() {
   $COP/scripts/cop_setup.sh -R
   echo "${1}...exiting"
   exit 1
}

function verifyServerTraffic() {
   # verifyServerTraffic 
   # validate that backend <server_name>
   # got at least <num_requests> requests from client
   # with a minimum of <percent> HTTP status code <code>
   local haproxy_addr="$1"
   local server_name="$2"
   local num_requests="$3"
   local percent="$4"
   local code="$5"
   local op="$6"
   local rc=0

    # default 
    #  server got at least one request
    #  all received requests were successfully served
    : ${haproxy_addr:="localhost:10888"}
    : ${server_name:="server1"}
    : ${num_requests:="1"}
    : ${percent:="100"}
    : ${code:="HTTP 2xx"}
    : ${op:="eq"}

   result=$(curl -s http://${haproxy_addr}/ |
     awk -v s="$server_name" '$0~s'|html2text|
        awk -v c="$code" '
           /Cum. sessions:/ {sessions=$NF}
           $0~c {gsub(/[(%)]/,"",$NF);status=$NF}
           END {print sessions" "status}')
   eval test "${result%% *}" -$op "$num_requests" 2>/dev/null; rc=$((rc+$?)) 
   eval test "${result##* }" -$op "$percent" 2>/dev/null; rc=$((rc+$?)) 

   return $rc
}

function printAuth() {
   CLIENTCERT=$1
   CLENTKEY=$2
   
   : ${CLIENTCERT:="$HOME/cop/cert.pem"}
   : ${CLIENTKEY:="$HOME/cop/key.pem"}
   
   echo CERT:
   openssl x509 -in $CLIENTCERT -text 2>&1 | sed 's/^/    /'
   type=$(cat $CLIENTKEY | head -n1 | awk '{print tolower($2)}')
   echo KEY:
   openssl $type -in $CLENTKEY -text 2>/dev/null| sed 's/^/    /'
}
